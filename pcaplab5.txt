q1. a)

#include <stdio.h>
#include <cuda_runtime.h>

__global__ void addVectors(int *A, int *B, int *C, int N) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    if (i < N) {
        C[i] = A[i] + B[i];
    }
}

int main() {
    int N = 5;
    int size = N * sizeof(int);
    int A[] = {1, 2, 3, 4, 5};
    int B[] = {5, 4, 3, 2, 1};
    int C[N];

    int *d_A, *d_B, *d_C;

    cudaMalloc((void **)&d_A, size);
    cudaMalloc((void **)&d_B, size);
    cudaMalloc((void **)&d_C, size);

    cudaMemcpy(d_A, A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, B, size, cudaMemcpyHostToDevice);

    addVectors<<<1, N>>>(d_A, d_B, d_C, N);

    cudaMemcpy(C, d_C, size, cudaMemcpyDeviceToHost);

    printf("Resultant vector C: ");
    for (int i = 0; i < N; i++) {
        printf("%d ", C[i]);
    }
    printf("\n");

    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    return 0;
}

b)

#include <stdio.h>
#include <cuda_runtime.h>

__global__ void addVectors(int *A, int *B, int *C, int N) {
    int i = threadIdx.x;
    if (i < N) {
        C[i] = A[i] + B[i];
    }
}

int main() {
    int N = 5;
    int size = N * sizeof(int);
    int A[] = {1, 2, 3, 4, 5};
    int B[] = {5, 4, 3, 2, 1};
    int C[N];

    int *d_A, *d_B, *d_C;

    cudaMalloc((void **)&d_A, size);
    cudaMalloc((void **)&d_B, size);
    cudaMalloc((void **)&d_C, size);

    cudaMemcpy(d_A, A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, B, size, cudaMemcpyHostToDevice);

    addVectors<<<1, N>>>(d_A, d_B, d_C, N);

    cudaMemcpy(C, d_C, size, cudaMemcpyDeviceToHost);

    printf("Resultant vector C: ");
    for (int i = 0; i < N; i++) {
        printf("%d ", C[i]);
    }
    printf("\n");

    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    return 0;
}

q2.

#include <stdio.h>
#include <cuda_runtime.h>

__global__ void addVectors(int *A, int *B, int *C, int N) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < N) {
        C[i] = A[i] + B[i];
    }
}

int main() {
    int N = 1024;
    int blockSize = 256;
    int numBlocks = (N + blockSize - 1) / blockSize;
    int size = N * sizeof(int);
    int A[N], B[N], C[N];

    // Initialize vectors A and B
    for (int i = 0; i < N; i++) {
        A[i] = i;
        B[i] = N - i;
    }

    int *d_A, *d_B, *d_C;

    cudaMalloc((void **)&d_A, size);
    cudaMalloc((void **)&d_B, size);
    cudaMalloc((void **)&d_C, size);

    cudaMemcpy(d_A, A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, B, size, cudaMemcpyHostToDevice);

    addVectors<<<numBlocks, blockSize>>>(d_A, d_B, d_C, N);

    cudaMemcpy(C, d_C, size, cudaMemcpyDeviceToHost);

    // Print first 10 elements of C
    for (int i = 0; i < 10; i++) {
        printf("%d ", C[i]);
    }
    printf("\n");

    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    return 0;
}

q3.

#include <stdio.h>
#include <cuda_runtime.h>
#include <math.h>

__global__ void calculateSine(float *angles, float *sineResults, int N) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    if (i < N) {
        sineResults[i] = sin(angles[i]);
    }
}

int main() {
    int N = 5;
    int size = N * sizeof(float);
    float angles[] = {0.0, 0.5236, 1.5708, 2.0944, 3.1416}; // Angles in radians
    float sineResults[N];

    float *d_angles, *d_sineResults;

    cudaMalloc((void **)&d_angles, size);
    cudaMalloc((void **)&d_sineResults, size);

    cudaMemcpy(d_angles, angles, size, cudaMemcpyHostToDevice);

    calculateSine<<<1, N>>>(d_angles, d_sineResults, N);

    cudaMemcpy(sineResults, d_sineResults, size, cudaMemcpyDeviceToHost);

    printf("Sine results: ");
    for (int i = 0; i < N; i++) {
        printf("%.4f ", sineResults[i]);
    }
    printf("\n");

    cudaFree(d_angles);
    cudaFree(d_sineResults);

    return 0;
}


commands

sudo apt update
sudo apt install nvidia-cuda-toolkit
nvcc -o vectorAdd vectorAdd.cu
