q1.
#include <stdio.h>
#include <mpi.h>
long factorial(int n) {
    long fact = 1;
    for (int i = 1; i <= n; i++) {
        fact *= i;
    }
    return fact;
}
int main(int argc, char *argv[]) {
    int rank, size, N;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        printf("Enter the number of values (N): ");
        scanf("%d", &N);
        int values[N];
        printf("Enter %d numbers: ", N);
        for (int i = 0; i < N; i++) {
            scanf("%d", &values[i]);
        }
        for (int i = 1; i < size; i++) {
            MPI_Send(&values[i - 1], 1, MPI_INT, i, 0, MPI_COMM_WORLD);
        }
        long total_sum = 0;
        for (int i = 1; i < size; i++) {
            long partial_result;
            MPI_Recv(&partial_result, 1, MPI_LONG, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            total_sum += partial_result;
        }
        printf("Total sum of factorials: %ld\n", total_sum);
    } else {
        int num;
        MPI_Recv(&num, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        long fact = factorial(num);
        MPI_Send(&fact, 1, MPI_LONG, 0, 0, MPI_COMM_WORLD);
    }
    MPI_Finalize();
    return 0;
}

q2.

#include <stdio.h>
#include <mpi.h>
int main(int argc, char *argv[]) {
    int rank, size, M, N;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        printf("Enter the number of elements per process (M): ");
        scanf("%d", &M);
        N = M * (size - 1);
        int array[N];
        printf("Enter %d elements: ", N);
        for (int i = 0; i < N; i++) {
            scanf("%d", &array[i]);
        }
        for (int i = 1; i < size; i++) {
            MPI_Send(&array[(i - 1) * M], M, MPI_INT, i, 0, MPI_COMM_WORLD);
        }
        double total_average = 0;
        for (int i = 1; i < size; i++) {
            double partial_avg;
            MPI_Recv(&partial_avg, 1, MPI_DOUBLE, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            total_average += partial_avg;
        }
        total_average /= (size - 1);
        printf("Overall average: %.2f\n", total_average);
    } else {
        int elements[M];
        MPI_Recv(elements, M, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        double sum = 0;
        for (int i = 0; i < M; i++) {
            sum += elements[i];
        }
        double avg = sum / M;
        MPI_Send(&avg, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD);
    }
    MPI_Finalize();
    return 0;
}

q3.
#include <stdio.h>
#include <mpi.h>
#include <ctype.h>
#include <string.h>

int count_non_vowels(const char *str, int start, int end) {
    int count = 0;
    for (int i = start; i < end; i++) {
        char c = tolower(str[i]);
        if (c >= 'a' && c <= 'z' && c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {
            count++;
        }
    }
    return count;
}

int main(int argc, char *argv[]) {
    int rank, size, len;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        char str[100];
        printf("Enter a string: ");
        scanf("%s", str);
        len = strlen(str);

        for (int i = 1; i < size; i++) {
            MPI_Send(str, len + 1, MPI_CHAR, i, 0, MPI_COMM_WORLD);
        }

        int total_non_vowels = 0;
        for (int i = 1; i < size; i++) {
            int partial_count;
            MPI_Recv(&partial_count, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
            total_non_vowels += partial_count;
        }

        printf("Total non-vowels: %d\n", total_non_vowels);
    } else {
        char str[100];
        MPI_Recv(str, 100, MPI_CHAR, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        int start = (strlen(str) / (size - 1)) * (rank - 1);
        int end = (rank == size - 1) ? strlen(str) : start + strlen(str) / (size - 1);

        int non_vowel_count = count_non_vowels(str, start, end);
        MPI_Send(&non_vowel_count, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}

q4.

#include <stdio.h>
#include <mpi.h>
#include <string.h>

int main(int argc, char *argv[]) {
    int rank, size, len;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        char str1[100], str2[100];
        printf("Enter first string: ");
        scanf("%s", str1);
        printf("Enter second string: ");
        scanf("%s", str2);

        len = strlen(str1);
        for (int i = 1; i < size; i++) {
            MPI_Send(str1, len + 1, MPI_CHAR, i, 0, MPI_COMM_WORLD);
            MPI_Send(str2, len + 1, MPI_CHAR, i, 0, MPI_COMM_WORLD);
        }

        char result[len + 1];
        for (int i = 1; i < size; i++) {
            char partial_result[len + 1];
            MPI_Recv(partial_result, len + 1, MPI_CHAR, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

            for (int j = 0; j < len / (size - 1); j++) {
                result[(i - 1) * (len / (size - 1)) + j] = partial_result[j];
            }
        }

        result[len] = '\0';
        printf("Resultant String: %s\n", result);
    } else {
        char str1[100], str2[100];
        MPI_Recv(str1, 100, MPI_CHAR, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        MPI_Recv(str2, 100, MPI_CHAR, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        int start = (strlen(str1) / (size - 1)) * (rank - 1);
        int end = (rank == size - 1) ? strlen(str1) : start + strlen(str1) / (size - 1);

        char partial_result[end - start + 1];
        for (int i = start; i < end; i++) {
            partial_result[i - start] = (i % 2 == 0) ? str1[i] : str2[i];
        }
        partial_result[end - start] = '\0';

        MPI_Send(partial_result, end - start + 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}



