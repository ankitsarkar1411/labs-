PCAP Lab 2 

Q1. #include <stdio.h>
#include <mpi.h>
#include <ctype.h>
int main(int argc, char *argv[]) {
    int rank, size;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    char word[100], modified_word[100];
    if (rank == 0) {
        printf("Enter a word: ");
        scanf("%s", word);
        MPI_Ssend(word, 100, MPI_CHAR, 1, 0, MPI_COMM_WORLD);
        MPI_Recv(modified_word, 100, MPI_CHAR, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        printf("Modified word: %s\n", modified_word);
    }
    else if (rank == 1) {
        MPI_Recv(word, 100, MPI_CHAR, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        for (int i = 0; word[i] != '\0'; i++) {
            if (islower(word[i])) {
                modified_word[i] = toupper(word[i]);
            } else {
                modified_word[i] = tolower(word[i]);
            }
        }
        MPI_Ssend(modified_word, 100, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
    }
    MPI_Finalize();
    return 0;
}

Q2.

#include <stdio.h>
#include <mpi.h>
int main(int argc, char *argv[]) {
    int rank, size, number;
    MPI_Init(&argc, &argv);                  
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);   
    MPI_Comm_size(MPI_COMM_WORLD, &size);   
    if (rank == 0) {
        for (int i = 1; i < size; i++) {
            number = i * 10;
            MPI_Send(&number, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
            printf("Master sent %d to process %d\n", number, i);
        }
    } else {
        MPI_Recv(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE); // Receive from master
        printf("Process %d received number %d from master\n", rank, number);
    }
    MPI_Finalize(); // Finalize MPI
    return 0;
}

Q3.

#include <stdio.h>
#include <mpi.h>
int main(int argc, char *argv[]) {
    int rank, size, number;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    int arr[size];
    if (rank == 0) {
        printf("Enter %d elements of the array: ", size);
        for (int i = 0; i < size; i++) {
            scanf("%d", &arr[i]);
        }
        for (int i = 1; i < size; i++) {
            MPI_Bsend(&arr[i], 1, MPI_INT, i, 0, MPI_COMM_WORLD); 
        }
    } else {
        MPI_Recv(&number, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE); 
        if (rank % 2 == 0) {
            printf("Process %d received %d, square: %d\n", rank, number, number * number);
        } else {
            printf("Process %d received %d, cube: %d\n", rank, number, number * number * number);
        }
    }
    MPI_Finalize();
    return 0;
}

Q4.

#include <stdio.h>
#include <mpi.h>
int main(int argc, char *argv[]) {
    int rank, size, value;
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    if (rank == 0) {
        printf("Enter an integer: ");
        scanf("%d", &value);
        MPI_Send(&value, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
        MPI_Recv(&value, 1, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        printf("Final value received by root: %d\n", value);
    } else {
        MPI_Recv(&value, 1, MPI_INT, rank - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        value++;
        MPI_Send(&value, 1, MPI_INT, (rank + 1) % size, 0, MPI_COMM_WORLD);
    }
    MPI_Finalize();
    return 0;
}


