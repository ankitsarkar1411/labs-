PCAP Lab 1 

q1 . #include <mpi.h>
#include <stdio.h>
#include <math.h>

int main(int argc, char** argv) {
    // Initialize MPI
    MPI_Init(&argc, &argv);

    // Get the rank and size of the process
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Constant x (base)
    const int x = 2; // You can change this value

    // Compute pow(x, rank)
    double result = pow(x, rank);

    // Print the result from each process
    printf("Process %d: %d^%d = %.0f\n", rank, x, rank, result);

    // Finalize MPI
    MPI_Finalize();
    return 0;
}


q2. 

#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    // Initialize MPI
    MPI_Init(&argc, &argv);

    // Get the rank and size of the process
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Determine whether the rank is even or odd
    if (rank % 2 == 0) {
        printf("Process %d: Hello\n", rank);
    } else {
        printf("Process %d: World\n", rank);
    }

    // Finalize MPI
    MPI_Finalize();
    return 0;
}

q3.

#include <mpi.h>
#include <stdio.h>

int main(int argc, char** argv) {
    // Initialize MPI
    MPI_Init(&argc, &argv);

    // Get rank and size of the processes
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Ensure at least 4 processes for calculator operations
    if (size < 4) {
        if (rank == 0) {
            printf("Please run the program with at least 4 processes.\n");
        }
        MPI_Finalize();
        return 0;
    }

    // Input values (shared across all processes)
    const int a = 20;
    const int b = 10;
    double result;

    // Perform operations based on rank
    switch (rank) {
        case 0:
            result = a + b;
            printf("Process %d: Addition (%d + %d) = %.2f\n", rank, a, b, result);
            break;
        case 1:
            result = a - b;
            printf("Process %d: Subtraction (%d - %d) = %.2f\n", rank, a, b, result);
            break;
        case 2:
            result = a * b;
            printf("Process %d: Multiplication (%d * %d) = %.2f\n", rank, a, b, result);
            break;
        case 3:
            if (b != 0) {
                result = (double)a / b;
                printf("Process %d: Division (%d / %d) = %.2f\n", rank, a, b, result);
            } else {
                printf("Process %d: Division by zero error!\n", rank);
            }
            break;
        default:
            printf("Process %d: No operation assigned.\n", rank);
            break;
    }

    // Finalize MPI
    MPI_Finalize();
    return 0;
}

q4.

#include <mpi.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main(int argc, char** argv) {
    // Initialize MPI
    MPI_Init(&argc, &argv);

    // Get the rank and size of the processes
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Input string (shared across processes)
    char str[] = "HelloWorld";
    int str_len = strlen(str);

    // Ensure the rank is within the string's length
    if (rank < str_len) {
        // Toggle the character at the index corresponding to the rank
        if (isupper(str[rank])) {
            str[rank] = tolower(str[rank]);
        } else if (islower(str[rank])) {
            str[rank] = toupper(str[rank]);
        }

        // Print the updated character and its index
        printf("Process %d: Toggled character at index %d to '%c'\n", rank, rank, str[rank]);
    }

    // Finalize MPI
    MPI_Finalize();

    // Process 0 can optionally print the final result
    if (rank == 0) {
        printf("Final toggled string: %s\n", str);
    }

    return 0;
}

q5.

#include <mpi.h>
#include <stdio.h>

// Function to calculate factorial
unsigned long long factorial(int n) {
    unsigned long long result = 1;
    for (int i = 1; i <= n; ++i) {
        result *= i;
    }
    return result;
}

// Function to calculate the nth Fibonacci number
unsigned long long fibonacci(int n) {
    if (n == 0) return 0;
    if (n == 1) return 1;

    unsigned long long a = 0, b = 1, c;
    for (int i = 2; i <= n; ++i) {
        c = a + b;
        a = b;
        b = c;
    }
    return b;
}

int main(int argc, char** argv) {
    // Initialize MPI
    MPI_Init(&argc, &argv);

    // Get the rank and size of the processes
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank % 2 == 0) {
        // Even-ranked process: Calculate factorial
        unsigned long long fact = factorial(rank);
        printf("Process %d (Even): Factorial of %d = %llu\n", rank, rank, fact);
    } else {
        // Odd-ranked process: Calculate Fibonacci
        unsigned long long fib = fibonacci(rank);
        printf("Process %d (Odd): Fibonacci number at %d = %llu\n", rank, rank, fib);
    }

    // Finalize MPI
    MPI_Finalize();
    return 0;
}
